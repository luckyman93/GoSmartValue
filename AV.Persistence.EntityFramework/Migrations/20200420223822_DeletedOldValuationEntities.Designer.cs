// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace AV.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(ValuationsContext))]
    [Migration("20200420223822_DeletedOldValuationEntities")]
    partial class DeletedOldValuationEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AV.Common.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountType");

                    b.Property<DateTime>("AddedOn");

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<bool>("IsCorporate");

                    b.Property<bool>("IsSalesAgent");

                    b.Property<bool>("IsValuer");

                    b.Property<Guid?>("OrganisationId");

                    b.Property<Guid>("UserId");

                    b.Property<Guid>("VerifiedByUserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AV.Common.Entities.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuyerName");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<int?>("Salutation");

                    b.HasKey("Id");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("AV.Common.Entities.Comparable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTimeOffset>("AddedOn");

                    b.Property<string>("BandClassBandName");

                    b.Property<string>("BankName");

                    b.Property<decimal?>("BondAmount");

                    b.Property<string>("BondNumber");

                    b.Property<Guid?>("BuyerId");

                    b.Property<string>("BuyerName");

                    b.Property<int?>("BuyerSalutation");

                    b.Property<Guid?>("ComparableId");

                    b.Property<int>("DataState");

                    b.Property<DateTimeOffset?>("DateOfSale");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LandUse");

                    b.Property<Guid>("LastUpdatedBy");

                    b.Property<DateTimeOffset>("LastUpdatedOn");

                    b.Property<string>("Latitude");

                    b.Property<int?>("LocalityId");

                    b.Property<int>("LocationId");

                    b.Property<string>("Longitude");

                    b.Property<int>("Metric");

                    b.Property<int?>("PlotId");

                    b.Property<Guid?>("PlotId1");

                    b.Property<string>("PlotNo");

                    b.Property<decimal>("PlotSize");

                    b.Property<int>("PropertyType");

                    b.Property<decimal?>("SalePrice");

                    b.Property<Guid?>("SellerId");

                    b.Property<string>("SellerName");

                    b.Property<int?>("SellerSalutation");

                    b.Property<int?>("StreetId");

                    b.Property<string>("StreetName");

                    b.Property<string>("TitleDeedNo");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("BandClassBandName");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ComparableId");

                    b.HasIndex("LocalityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlotId1");

                    b.HasIndex("SellerId");

                    b.ToTable("Comparables");
                });

            modelBuilder.Entity("AV.Common.Entities.ComparableBandSize", b =>
                {
                    b.Property<string>("BandName")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LowerBandLimit");

                    b.Property<int>("UpperBandLimit");

                    b.HasKey("BandName");

                    b.ToTable("ComparableBandSizes");

                    b.HasData(
                        new
                        {
                            BandName = "LowIncome",
                            LowerBandLimit = 460,
                            UpperBandLimit = 600
                        },
                        new
                        {
                            BandName = "MiddleIncome",
                            LowerBandLimit = 601,
                            UpperBandLimit = 800
                        },
                        new
                        {
                            BandName = "HighIncome",
                            LowerBandLimit = 800,
                            UpperBandLimit = 2147483647
                        });
                });

            modelBuilder.Entity("AV.Common.Entities.ComparableResult", b =>
                {
                    b.Property<Guid>("ReferenceNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BathRooms");

                    b.Property<int>("BedRooms");

                    b.Property<Guid>("ComparableId");

                    b.Property<Guid>("ComparableRequestId");

                    b.Property<DateTimeOffset?>("DeletedOn");

                    b.Property<string>("Email");

                    b.Property<DateTimeOffset>("EstimatedOn");

                    b.Property<double>("EstimatedValue");

                    b.Property<string>("FirstName");

                    b.Property<int>("Garages");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Kitchens");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<int>("PaymentStatus");

                    b.Property<int>("PropertyDetailsId");

                    b.Property<Guid?>("PropertySaleId");

                    b.Property<bool>("ReportRequested");

                    b.Property<string>("ReportType");

                    b.Property<Guid?>("RequesterUserId");

                    b.Property<int>("SittingRooms");

                    b.Property<int>("Toilets");

                    b.HasKey("ReferenceNumber");

                    b.HasIndex("ComparableId");

                    b.HasIndex("PropertySaleId");

                    b.ToTable("ComparableResults");
                });

            modelBuilder.Entity("AV.Common.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Area");

                    b.Property<double>("Density");

                    b.Property<string>("Name");

                    b.Property<int>("Population");

                    b.HasKey("Id");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 28470.0,
                            Density = 6.9465000000000003,
                            Name = "Southern",
                            Population = 197767
                        },
                        new
                        {
                            Id = 2,
                            Area = 1780.0,
                            Density = 47.759999999999998,
                            Name = "South-East",
                            Population = 85014
                        },
                        new
                        {
                            Id = 3,
                            Area = 31100.0,
                            Density = 9.7929999999999993,
                            Name = "Kweneng",
                            Population = 304549
                        },
                        new
                        {
                            Id = 4,
                            Area = 7960.0,
                            Density = 11.515000000000001,
                            Name = "Kgatleng",
                            Population = 91660
                        },
                        new
                        {
                            Id = 5,
                            Area = 142076.0,
                            Density = 4.0546189999999998,
                            Name = "Central",
                            Population = 576064
                        },
                        new
                        {
                            Id = 6,
                            Area = 550.0,
                            Density = 11.77,
                            Name = "North-East",
                            Population = 60264
                        },
                        new
                        {
                            Id = 7,
                            Area = 109130.0,
                            Density = 1.39544,
                            Name = "Ngamiland",
                            Population = 152284
                        },
                        new
                        {
                            Id = 8,
                            Area = 20800.0,
                            Density = 1.5249999999999999,
                            Name = "Chobe",
                            Population = 23347
                        },
                        new
                        {
                            Id = 9,
                            Area = 117910.0,
                            Density = 0.36549100000000001,
                            Name = "Ghanzi",
                            Population = 43095
                        },
                        new
                        {
                            Id = 10,
                            Area = 105200.0,
                            Density = 0.48243000000000003,
                            Name = "Kgalagadi",
                            Population = 50752
                        });
                });

            modelBuilder.Entity("AV.Common.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<Guid>("DocumentStreamId");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSizeMb");

                    b.Property<DateTimeOffset>("LastUpdatedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentStreamId");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("AV.Common.Entities.DocumentStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("FileStream");

                    b.Property<string>("MimeType");

                    b.HasKey("Id");

                    b.ToTable("DocumentStream");
                });

            modelBuilder.Entity("AV.Common.Entities.Instruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessContactMobileNumber");

                    b.Property<string>("AccessContactName");

                    b.Property<Guid>("AccountId");

                    b.Property<int>("AppointmentStatus");

                    b.Property<byte[]>("AuthorityDoc");

                    b.Property<bool>("CanBeReIssued");

                    b.Property<string>("ClientMobileNumber");

                    b.Property<string>("ClientName");

                    b.Property<string>("ClientOrganisationName");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("IssuerId");

                    b.Property<int>("LocalityId");

                    b.Property<string>("LocalityName");

                    b.Property<int>("LocationId");

                    b.Property<string>("LocationName");

                    b.Property<Guid?>("ParentInstructionId");

                    b.Property<string>("PlotNumber");

                    b.Property<DateTime?>("PreferredAccessDate");

                    b.Property<int>("Status");

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<bool>("ValuerAccepted");

                    b.Property<Guid>("ValuerId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("LocalityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentInstructionId");

                    b.HasIndex("ValuerId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("AV.Common.Entities.InstructionAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("InstructionId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.ToTable("InstructionAppointments");
                });

            modelBuilder.Entity("AV.Common.Entities.InstructionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid?>("GeneratedBy");

                    b.Property<Guid>("InstructionId");

                    b.Property<bool>("Internal");

                    b.Property<int>("Status");

                    b.Property<string>("Summary");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("InstructionId");

                    b.ToTable("InstructionHistory");
                });

            modelBuilder.Entity("AV.Common.Entities.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Localities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 33,
                            Name = "BBS Mall",
                            Verified = false
                        },
                        new
                        {
                            Id = 2,
                            LocationId = 33,
                            Name = "block 3",
                            Verified = false
                        },
                        new
                        {
                            Id = 3,
                            LocationId = 33,
                            Name = "Block 4",
                            Verified = false
                        },
                        new
                        {
                            Id = 4,
                            LocationId = 33,
                            Name = "Block 5",
                            Verified = false
                        },
                        new
                        {
                            Id = 5,
                            LocationId = 33,
                            Name = "Block 6",
                            Verified = false
                        },
                        new
                        {
                            Id = 6,
                            LocationId = 33,
                            Name = "block 7",
                            Verified = false
                        },
                        new
                        {
                            Id = 7,
                            LocationId = 33,
                            Name = "block 8",
                            Verified = false
                        },
                        new
                        {
                            Id = 8,
                            LocationId = 33,
                            Name = "Block 9",
                            Verified = false
                        },
                        new
                        {
                            Id = 9,
                            LocationId = 33,
                            Name = "Block 10",
                            Verified = false
                        },
                        new
                        {
                            Id = 10,
                            LocationId = 33,
                            Name = "Broadhurst",
                            Verified = false
                        },
                        new
                        {
                            Id = 11,
                            LocationId = 33,
                            Name = "Broadhurst (Ginger)",
                            Verified = false
                        },
                        new
                        {
                            Id = 12,
                            LocationId = 33,
                            Name = "Commerce park",
                            Verified = false
                        },
                        new
                        {
                            Id = 13,
                            LocationId = 33,
                            Name = "Ext 11",
                            Verified = false
                        },
                        new
                        {
                            Id = 14,
                            LocationId = 33,
                            Name = "Ext 12",
                            Verified = false
                        },
                        new
                        {
                            Id = 15,
                            LocationId = 33,
                            Name = "Ext 14",
                            Verified = false
                        },
                        new
                        {
                            Id = 16,
                            LocationId = 33,
                            Name = "Ext 19",
                            Verified = false
                        },
                        new
                        {
                            Id = 17,
                            LocationId = 33,
                            Name = "Ext 16",
                            Verified = false
                        },
                        new
                        {
                            Id = 18,
                            LocationId = 33,
                            Name = "Ext 25",
                            Verified = false
                        },
                        new
                        {
                            Id = 19,
                            LocationId = 33,
                            Name = "Ext 9",
                            Verified = false
                        },
                        new
                        {
                            Id = 20,
                            LocationId = 33,
                            Name = "Gaborone west",
                            Verified = false
                        },
                        new
                        {
                            Id = 21,
                            LocationId = 33,
                            Name = "Gaborone",
                            Verified = false
                        },
                        new
                        {
                            Id = 22,
                            LocationId = 33,
                            Name = "Kgale view",
                            Verified = false
                        },
                        new
                        {
                            Id = 23,
                            LocationId = 33,
                            Name = "Mogoditshane",
                            Verified = false
                        },
                        new
                        {
                            Id = 24,
                            LocationId = 33,
                            Name = "Notwane",
                            Verified = false
                        },
                        new
                        {
                            Id = 25,
                            LocationId = 33,
                            Name = "Old Naledi",
                            Verified = false
                        },
                        new
                        {
                            Id = 26,
                            LocationId = 33,
                            Name = "Phakalane",
                            Verified = false
                        },
                        new
                        {
                            Id = 27,
                            LocationId = 33,
                            Name = "Phase 1",
                            Verified = false
                        },
                        new
                        {
                            Id = 28,
                            LocationId = 33,
                            Name = "Phase 2",
                            Verified = false
                        },
                        new
                        {
                            Id = 29,
                            LocationId = 33,
                            Name = "Phase 3",
                            Verified = false
                        },
                        new
                        {
                            Id = 30,
                            LocationId = 33,
                            Name = "Phase 4",
                            Verified = false
                        },
                        new
                        {
                            Id = 31,
                            LocationId = 33,
                            Name = "Tlokweng",
                            Verified = false
                        },
                        new
                        {
                            Id = 32,
                            LocationId = 33,
                            Name = "Tshweneng",
                            Verified = false
                        },
                        new
                        {
                            Id = 33,
                            LocationId = 33,
                            Name = "Tsholofelo West",
                            Verified = false
                        },
                        new
                        {
                            Id = 34,
                            LocationId = 33,
                            Name = "Tsholofelo East",
                            Verified = false
                        },
                        new
                        {
                            Id = 35,
                            LocationId = 33,
                            Name = "Tsholofelo",
                            Verified = false
                        },
                        new
                        {
                            Id = 36,
                            LocationId = 33,
                            Name = "Taung",
                            Verified = false
                        },
                        new
                        {
                            Id = 37,
                            LocationId = 33,
                            Name = "Tawana",
                            Verified = false
                        },
                        new
                        {
                            Id = 38,
                            LocationId = 33,
                            Name = "whitecity",
                            Verified = false
                        },
                        new
                        {
                            Id = 39,
                            LocationId = 4,
                            Name = "Flowertown",
                            Verified = false
                        },
                        new
                        {
                            Id = 40,
                            LocationId = 43,
                            Name = "Gaphatshwa",
                            Verified = false
                        },
                        new
                        {
                            Id = 41,
                            LocationId = 27,
                            Name = "Lekgwapheng",
                            Verified = false
                        },
                        new
                        {
                            Id = 42,
                            LocationId = 2,
                            Name = "Mafenyatlala",
                            Verified = false
                        },
                        new
                        {
                            Id = 43,
                            LocationId = 45,
                            Name = "Matebeleng",
                            Verified = false
                        },
                        new
                        {
                            Id = 44,
                            LocationId = 45,
                            Name = "Modipane",
                            Verified = false
                        },
                        new
                        {
                            Id = 45,
                            LocationId = 36,
                            Name = "Boatle",
                            Verified = false
                        },
                        new
                        {
                            Id = 46,
                            LocationId = 36,
                            Name = "Lesetlhana",
                            Verified = false
                        },
                        new
                        {
                            Id = 47,
                            LocationId = 46,
                            Name = "West Extension",
                            Verified = false
                        },
                        new
                        {
                            Id = 48,
                            LocationId = 13,
                            Name = "Mere",
                            Verified = false
                        },
                        new
                        {
                            Id = 49,
                            LocationId = 13,
                            Name = "Morula",
                            Verified = false
                        },
                        new
                        {
                            Id = 50,
                            LocationId = 15,
                            Name = "matlhabana",
                            Verified = false
                        },
                        new
                        {
                            Id = 51,
                            LocationId = 28,
                            Name = "Mine stone",
                            Verified = false
                        },
                        new
                        {
                            Id = 52,
                            LocationId = 28,
                            Name = "Tati River",
                            Verified = false
                        },
                        new
                        {
                            Id = 53,
                            LocationId = 33,
                            Name = "Partial ",
                            Verified = false
                        },
                        new
                        {
                            Id = 54,
                            LocationId = 33,
                            Name = "Ext 10",
                            Verified = false
                        },
                        new
                        {
                            Id = 55,
                            LocationId = 33,
                            Name = "Village",
                            Verified = false
                        },
                        new
                        {
                            Id = 56,
                            LocationId = 33,
                            Name = "Ext 2",
                            Verified = false
                        },
                        new
                        {
                            Id = 57,
                            LocationId = 33,
                            Name = "Ext 27",
                            Verified = false
                        },
                        new
                        {
                            Id = 58,
                            LocationId = 33,
                            Name = "Tawana",
                            Verified = false
                        },
                        new
                        {
                            Id = 59,
                            LocationId = 33,
                            Name = "Ledumang",
                            Verified = false
                        },
                        new
                        {
                            Id = 60,
                            LocationId = 33,
                            Name = "Block 3 (Industrial)",
                            Verified = false
                        },
                        new
                        {
                            Id = 61,
                            LocationId = 33,
                            Name = "Gaborone North",
                            Verified = false
                        });
                });

            modelBuilder.Entity("AV.Common.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Name");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictId = 5,
                            Name = "Bobirwa",
                            Verified = false
                        },
                        new
                        {
                            Id = 2,
                            DistrictId = 5,
                            Name = "Boteti",
                            Verified = false
                        },
                        new
                        {
                            Id = 3,
                            DistrictId = 5,
                            Name = "Lerala",
                            Verified = false
                        },
                        new
                        {
                            Id = 4,
                            DistrictId = 5,
                            Name = "Mahalapye",
                            Verified = false
                        },
                        new
                        {
                            Id = 5,
                            DistrictId = 5,
                            Name = "Mmadinare",
                            Verified = false
                        },
                        new
                        {
                            Id = 6,
                            DistrictId = 5,
                            Name = "Mmaphashalala",
                            Verified = false
                        },
                        new
                        {
                            Id = 7,
                            DistrictId = 5,
                            Name = "Mogorosi",
                            Verified = false
                        },
                        new
                        {
                            Id = 8,
                            DistrictId = 5,
                            Name = "Nata",
                            Verified = false
                        },
                        new
                        {
                            Id = 9,
                            DistrictId = 5,
                            Name = "Paje",
                            Verified = false
                        },
                        new
                        {
                            Id = 10,
                            DistrictId = 5,
                            Name = "Rakops",
                            Verified = false
                        },
                        new
                        {
                            Id = 11,
                            DistrictId = 5,
                            Name = "Sebina",
                            Verified = false
                        },
                        new
                        {
                            Id = 12,
                            DistrictId = 5,
                            Name = "Sefhare",
                            Verified = false
                        },
                        new
                        {
                            Id = 13,
                            DistrictId = 5,
                            Name = "Serowe",
                            Verified = false
                        },
                        new
                        {
                            Id = 14,
                            DistrictId = 5,
                            Name = "Palapye",
                            Verified = false
                        },
                        new
                        {
                            Id = 15,
                            DistrictId = 5,
                            Name = "Shoshong",
                            Verified = false
                        },
                        new
                        {
                            Id = 16,
                            DistrictId = 5,
                            Name = "Taupye",
                            Verified = false
                        },
                        new
                        {
                            Id = 17,
                            DistrictId = 5,
                            Name = "Tonota",
                            Verified = false
                        },
                        new
                        {
                            Id = 18,
                            DistrictId = 5,
                            Name = "Tutume",
                            Verified = false
                        },
                        new
                        {
                            Id = 19,
                            DistrictId = 9,
                            Name = "Charleshill",
                            Verified = false
                        },
                        new
                        {
                            Id = 20,
                            DistrictId = 9,
                            Name = "Ghanzi",
                            Verified = false
                        },
                        new
                        {
                            Id = 21,
                            DistrictId = 10,
                            Name = "Hukuntsi",
                            Verified = false
                        },
                        new
                        {
                            Id = 22,
                            DistrictId = 10,
                            Name = "Kang",
                            Verified = false
                        },
                        new
                        {
                            Id = 50,
                            DistrictId = 10,
                            Name = "Tshabong",
                            Verified = false
                        },
                        new
                        {
                            Id = 23,
                            DistrictId = 4,
                            Name = "Mmathubudukwane",
                            Verified = false
                        },
                        new
                        {
                            Id = 24,
                            DistrictId = 4,
                            Name = "Mochudi",
                            Verified = false
                        },
                        new
                        {
                            Id = 25,
                            DistrictId = 3,
                            Name = "Letlhakeng",
                            Verified = false
                        },
                        new
                        {
                            Id = 26,
                            DistrictId = 3,
                            Name = "Molepolole",
                            Verified = false
                        },
                        new
                        {
                            Id = 27,
                            DistrictId = 6,
                            Name = "Francistown",
                            Verified = false
                        },
                        new
                        {
                            Id = 28,
                            DistrictId = 6,
                            Name = "Masunga",
                            Verified = false
                        },
                        new
                        {
                            Id = 29,
                            DistrictId = 7,
                            Name = "Ngamiland East",
                            Verified = false
                        },
                        new
                        {
                            Id = 30,
                            DistrictId = 7,
                            Name = "Ngamiland West",
                            Verified = false
                        },
                        new
                        {
                            Id = 31,
                            DistrictId = 7,
                            Name = "Okavango",
                            Verified = false
                        },
                        new
                        {
                            Id = 33,
                            DistrictId = 2,
                            Name = "Gaborone",
                            Verified = false
                        },
                        new
                        {
                            Id = 32,
                            DistrictId = 2,
                            Name = "Mogobane",
                            Verified = false
                        },
                        new
                        {
                            Id = 34,
                            DistrictId = 2,
                            Name = "Otse",
                            Verified = false
                        },
                        new
                        {
                            Id = 35,
                            DistrictId = 2,
                            Name = "Ramotswa",
                            Verified = false
                        },
                        new
                        {
                            Id = 36,
                            DistrictId = 2,
                            Name = "Tlokweng",
                            Verified = false
                        },
                        new
                        {
                            Id = 37,
                            DistrictId = 1,
                            Name = "Goodhope",
                            Verified = false
                        },
                        new
                        {
                            Id = 38,
                            DistrictId = 1,
                            Name = "Jwaneng",
                            Verified = false
                        },
                        new
                        {
                            Id = 39,
                            DistrictId = 1,
                            Name = "Kanye",
                            Verified = false
                        },
                        new
                        {
                            Id = 40,
                            DistrictId = 1,
                            Name = "Mabutsane",
                            Verified = false
                        },
                        new
                        {
                            Id = 41,
                            DistrictId = 1,
                            Name = "Moshupa",
                            Verified = false
                        },
                        new
                        {
                            Id = 42,
                            DistrictId = 4,
                            Name = "Bokaa",
                            Verified = false
                        },
                        new
                        {
                            Id = 43,
                            DistrictId = 3,
                            Name = "Metsimotlhabe",
                            Verified = false
                        },
                        new
                        {
                            Id = 44,
                            DistrictId = 3,
                            Name = "Mmopane",
                            Verified = false
                        },
                        new
                        {
                            Id = 45,
                            DistrictId = 4,
                            Name = "Oodi",
                            Verified = false
                        },
                        new
                        {
                            Id = 46,
                            DistrictId = 4,
                            Name = "Rasesa",
                            Verified = false
                        },
                        new
                        {
                            Id = 47,
                            DistrictId = 3,
                            Name = "Thamaga",
                            Verified = false
                        },
                        new
                        {
                            Id = 48,
                            DistrictId = 5,
                            Name = "Sandveld",
                            Verified = false
                        });
                });

            modelBuilder.Entity("AV.Common.Entities.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LocalityId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name");

                    b.Property<string>("PlotNo");

                    b.Property<string>("PostalAddress");

                    b.Property<Guid>("PrimaryUserId");

                    b.Property<int?>("StreetId");

                    b.Property<string>("StreetName");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PrimaryUserId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("AV.Common.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("OrganisationId");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("AV.Common.Entities.Plot", b =>
                {
                    b.Property<Guid>("PlotId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LandUse");

                    b.Property<string>("PlotNo");

                    b.Property<int>("PolygonId");

                    b.Property<int>("Size");

                    b.Property<int>("StreetId");

                    b.Property<double?>("polygonShapeId");

                    b.HasKey("PlotId");

                    b.HasIndex("StreetId");

                    b.HasIndex("polygonShapeId");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("AV.Common.Entities.PlotShape", b =>
                {
                    b.Property<double>("ShapeId");

                    b.Property<double>("Height");

                    b.Property<double>("Width");

                    b.HasKey("ShapeId");

                    b.ToTable("PlotShape");
                });

            modelBuilder.Entity("AV.Common.Entities.PropertyFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<Guid?>("ComparableId");

                    b.Property<Guid?>("ComparableResultReferenceNumber");

                    b.Property<string>("Description");

                    b.Property<int>("FeatureType");

                    b.Property<Guid>("PropertySaleId");

                    b.HasKey("Id");

                    b.HasIndex("ComparableId");

                    b.HasIndex("ComparableResultReferenceNumber");

                    b.HasIndex("PropertySaleId");

                    b.ToTable("PropertyFeature");
                });

            modelBuilder.Entity("AV.Common.Entities.PropertySale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddedBy");

                    b.Property<DateTimeOffset>("AddedOn");

                    b.Property<string>("BandClassBandName");

                    b.Property<string>("BankName");

                    b.Property<decimal?>("BondAmount");

                    b.Property<string>("BondNumber");

                    b.Property<Guid?>("BuyerId");

                    b.Property<string>("BuyerName");

                    b.Property<int>("DataState");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTimeOffset?>("DateOfSale");

                    b.Property<int?>("LandUse");

                    b.Property<Guid?>("LastUpdatedBy");

                    b.Property<DateTimeOffset>("LastUpdatedOn");

                    b.Property<double?>("Latitude");

                    b.Property<int?>("LocalityId");

                    b.Property<int>("LocationId");

                    b.Property<double?>("Longitude");

                    b.Property<int>("Metric");

                    b.Property<int?>("PlotId");

                    b.Property<Guid?>("PlotId1");

                    b.Property<string>("PlotNo");

                    b.Property<decimal?>("PlotSize");

                    b.Property<Guid?>("PropertySaleId");

                    b.Property<int?>("PropertyType");

                    b.Property<decimal?>("SalePrice");

                    b.Property<Guid?>("SellerId");

                    b.Property<string>("SellerName");

                    b.Property<int?>("StreetId");

                    b.Property<string>("StreetName");

                    b.Property<int?>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("BandClassBandName");

                    b.HasIndex("BuyerId");

                    b.HasIndex("LocalityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlotId1");

                    b.HasIndex("PropertySaleId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StreetId");

                    b.ToTable("PropertyDetails");
                });

            modelBuilder.Entity("AV.Common.Entities.Rooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ComparableId");

                    b.Property<Guid>("PropertySaleId");

                    b.Property<int>("RoomType");

                    b.HasKey("Id");

                    b.HasIndex("ComparableId");

                    b.HasIndex("PropertySaleId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AV.Common.Entities.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<int?>("Salutation");

                    b.Property<string>("SellerName");

                    b.HasKey("Id");

                    b.ToTable("Seller");
                });

            modelBuilder.Entity("AV.Common.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocalityId");

                    b.Property<string>("StreetName");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("AV.Common.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("IDNumber");

                    b.Property<string>("IndustryExperience");

                    b.Property<string>("LastName");

                    b.Property<string>("LinkedInUrl");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<DateTimeOffset>("PasswordResetExpiresOn");

                    b.Property<string>("PasswordResetLink");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ReacNumber")
                        .HasMaxLength(80);

                    b.Property<bool>("RegisteredProfessional");

                    b.Property<string>("ReibNumber")
                        .HasMaxLength(80);

                    b.Property<string>("ReturnUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AV.Common.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af4da8fd-6a63-4249-8b6a-d8068224f051"),
                            ConcurrencyStamp = "2928f4c7-924c-48ff-9f0b-357c65780bea",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a6c02a94-9984-423b-aaf8-7394f26fe6d0"),
                            ConcurrencyStamp = "8b9d8973-af3c-4f00-9631-04cc8d77dca5",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = new Guid("4eeebad8-3100-4103-8757-5e60780fb160"),
                            ConcurrencyStamp = "b5ddb1bc-3324-4011-a827-bf5887d373b1",
                            Name = "analyst",
                            NormalizedName = "ANALYST"
                        },
                        new
                        {
                            Id = new Guid("15733086-823e-452e-be44-e49a975f3964"),
                            ConcurrencyStamp = "39385642-504e-490e-89e2-f8bedb8e7adb",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("08d7809a-443e-6a79-090d-0de147013b55"),
                            ConcurrencyStamp = "425e9815-02cd-41ce-b658-d79ffdd405fd",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AV.Common.Entities.Account", b =>
                {
                    b.HasOne("AV.Common.Entities.Organisation", "Organisation")
                        .WithMany("UserAccounts")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("AV.Common.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.Comparable", b =>
                {
                    b.HasOne("AV.Common.Entities.ComparableBandSize", "BandClass")
                        .WithMany()
                        .HasForeignKey("BandClassBandName");

                    b.HasOne("AV.Common.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("AV.Common.Entities.Comparable")
                        .WithMany("ComparableProperties")
                        .HasForeignKey("ComparableId");

                    b.HasOne("AV.Common.Entities.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId");

                    b.HasOne("AV.Common.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.Plot", "Plot")
                        .WithMany()
                        .HasForeignKey("PlotId1");

                    b.HasOne("AV.Common.Entities.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");
                });

            modelBuilder.Entity("AV.Common.Entities.ComparableResult", b =>
                {
                    b.HasOne("AV.Common.Entities.Comparable", "Comparable")
                        .WithMany()
                        .HasForeignKey("ComparableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.PropertySale", "PropertySale")
                        .WithMany()
                        .HasForeignKey("PropertySaleId");
                });

            modelBuilder.Entity("AV.Common.Entities.Document", b =>
                {
                    b.HasOne("AV.Common.Entities.DocumentStream", "DocumentStream")
                        .WithMany()
                        .HasForeignKey("DocumentStreamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AV.Common.Entities.Instruction", b =>
                {
                    b.HasOne("AV.Common.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.User", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.Instruction", "ParentInstruction")
                        .WithMany()
                        .HasForeignKey("ParentInstructionId");

                    b.HasOne("AV.Common.Entities.User", "Valuer")
                        .WithMany()
                        .HasForeignKey("ValuerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.InstructionAppointment", b =>
                {
                    b.HasOne("AV.Common.Entities.Instruction")
                        .WithMany("Appointments")
                        .HasForeignKey("InstructionId");
                });

            modelBuilder.Entity("AV.Common.Entities.InstructionHistory", b =>
                {
                    b.HasOne("AV.Common.Entities.Instruction")
                        .WithMany("History")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.Locality", b =>
                {
                    b.HasOne("AV.Common.Entities.Location", "Location")
                        .WithMany("LocalAreas")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.Location", b =>
                {
                    b.HasOne("AV.Common.Entities.District", "District")
                        .WithMany("Regions")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("AV.Common.Entities.Organisation", b =>
                {
                    b.HasOne("AV.Common.Entities.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId");

                    b.HasOne("AV.Common.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("AV.Common.Entities.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.Phone", b =>
                {
                    b.HasOne("AV.Common.Entities.Organisation")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("OrganisationId");
                });

            modelBuilder.Entity("AV.Common.Entities.Plot", b =>
                {
                    b.HasOne("AV.Common.Entities.Street", "Street")
                        .WithMany("Plots")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.PlotShape", "polygon")
                        .WithMany()
                        .HasForeignKey("polygonShapeId");
                });

            modelBuilder.Entity("AV.Common.Entities.PropertyFeature", b =>
                {
                    b.HasOne("AV.Common.Entities.Comparable")
                        .WithMany("Features")
                        .HasForeignKey("ComparableId");

                    b.HasOne("AV.Common.Entities.ComparableResult")
                        .WithMany("Features")
                        .HasForeignKey("ComparableResultReferenceNumber");

                    b.HasOne("AV.Common.Entities.PropertySale", "PropertySale")
                        .WithMany("Features")
                        .HasForeignKey("PropertySaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.PropertySale", b =>
                {
                    b.HasOne("AV.Common.Entities.ComparableBandSize", "BandClass")
                        .WithMany()
                        .HasForeignKey("BandClassBandName");

                    b.HasOne("AV.Common.Entities.Buyer", "Buyer")
                        .WithMany("Transactions")
                        .HasForeignKey("BuyerId");

                    b.HasOne("AV.Common.Entities.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId");

                    b.HasOne("AV.Common.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.Plot", "Plot")
                        .WithMany("PropertyDetails")
                        .HasForeignKey("PlotId1");

                    b.HasOne("AV.Common.Entities.PropertySale")
                        .WithMany("Comparables")
                        .HasForeignKey("PropertySaleId");

                    b.HasOne("AV.Common.Entities.Seller", "Seller")
                        .WithMany("Transactions")
                        .HasForeignKey("SellerId");

                    b.HasOne("AV.Common.Entities.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId");
                });

            modelBuilder.Entity("AV.Common.Entities.Rooms", b =>
                {
                    b.HasOne("AV.Common.Entities.Comparable")
                        .WithMany("Rooms")
                        .HasForeignKey("ComparableId");

                    b.HasOne("AV.Common.Entities.PropertySale", "PropertySale")
                        .WithMany("Rooms")
                        .HasForeignKey("PropertySaleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.Street", b =>
                {
                    b.HasOne("AV.Common.Entities.Locality", "Locality")
                        .WithMany("Streets")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AV.Common.Entities.UserRole", b =>
                {
                    b.HasOne("AV.Common.Entities.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AV.Common.Entities.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AV.Common.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AV.Common.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AV.Common.Entities.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AV.Common.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AV.Common.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
